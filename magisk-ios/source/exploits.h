//
//  exploits.h
//  Undecimus
//
//  Created by Pwn20wnd on 7/10/19.
//  Copyright Â© 2019 Pwn20wnd. All rights reserved.
//

#ifndef exploits_h
#define exploits_h

#include <stdio.h>
#include <stdbool.h>
#include <mach/machine.h>

#define K_ASYNC_WAKE "Async Wake"
#define K_VOUCHER_SWAP "Voucher Swap"
#define K_SOCKPUPPET "Sock Puppet 3.0"
#define K_SOCKPORT "Sock Port 3.0"
#define K_MACH_SWAP "Mach Swap"
#define K_MACH_SWAP_2 "Mach Swap 2"
#define K_DEJA_XNU "Deja XNU"
#define K_NECP "Necp"
#define K_KALLOC_CRASH "Kalloc Crash"
#define K_TIME_WASTE "Time Waste"

#if __arm64e__
#define K_ZECOPS_PAC "ZecOps PAC"
#endif

#define EXPLOIT_SUPPORT_JAILBREAK (1<<0)
#define EXPLOIT_SUPPORT_PANIC (1<<1)
#define EXPLOIT_SUPPORT_RESPRING (1<<2)

#define EXC_NONE 1
#define EXC_FAILURE 2
#define EXC_PASS 3

typedef struct {
    const char *name;
    float reliability;
    const char *min_kernel_version;
    const char *max_kernel_version;
    void (^exception_handler)(int *exception);
    int requirements;
    int exploit_support;
} exploit_t;

void iterate_exploits(void (^handler)(exploit_t *exploit));
void iterate_evaluated_exploits(void (^handler)(exploit_t *exploit));
exploit_t *get_exploit_by_name(const char *name);
bool evaluate_exploit(exploit_t *exploit);
bool evaluate_exploit_by_name(const char *name);
exploit_t *get_best_exploit(int support);
const char *get_best_exploit_by_name(int support);
bool has_exploit_support(int support);

#endif /* exploits_h */
